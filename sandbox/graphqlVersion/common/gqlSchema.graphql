type Config implements Node {
  # The ID of an object
  id: ID!
  srcPaths: [String!]!
  srcExtensions: [String!]!
  langs: [String!]!
  msgFunctionNames: [String!]!
  msgRegexps: [String!]!
  fMinify: Boolean!
  fJsOutput: Boolean!
  fJsonOutput: Boolean!
  fReactIntlOutput: Boolean!
}

input ConfigUpdate {
  srcPaths: [String!]
  srcExtensions: [String!]
  langs: [String!]
  msgFunctionNames: [String!]
  msgRegexps: [String!]
  fMinify: Boolean
  fJsOutput: Boolean
  fJsonOutput: Boolean
  fReactIntlOutput: Boolean
}

type CreatedTranslationInKeyTranslationsPayload {
  viewer: Viewer
  translation: Translation
  parent: Key
  createdTranslationEdge: TranslationEdge
}

input CreateTranslationInKeyTranslationsInput {
  attrs: TranslationCreate
  parentId: ID!
  storyId: String
  clientMutationId: String
}

type CreateTranslationInKeyTranslationsPayload {
  viewer: Viewer
  stats: Stats!
  translation: Translation
  parent: Key
  createdTranslationEdge: TranslationEdge
  clientMutationId: String
}

type Key implements Node {
  # The ID of an object
  id: ID!
  isDeleted: Boolean
  context: String
  seq: Int
  text: String!
  description: String
  firstUsed: String!
  unusedSince: String
  sources: [String!]!
  isMarkdown: Boolean
  scope: String
  translations(after: String, first: Int, before: String, last: Int): TranslationConnection
}

# A connection to a list of items.
type KeyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [KeyEdge]
}

# An edge in a connection.
type KeyEdge {
  # The item at the end of the edge
  node: Key

  # A cursor for use in pagination
  cursor: String!
}

input KeyUpdate {
  isDeleted: Boolean
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

type Mutation {
  updateConfig(input: UpdateConfigInput!): UpdateConfigPayload
  updateKey(input: UpdateKeyInput!): UpdateKeyPayload
  parseSrcFiles(input: ParseSrcFilesInput!): ParseSrcFilesPayload
  createTranslationInKeyTranslations(input: CreateTranslationInKeyTranslationsInput!): CreateTranslationInKeyTranslationsPayload
  updateTranslation(input: UpdateTranslationInput!): UpdateTranslationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type ParsedSrcFilesPayload {
  viewer: Viewer
}

input ParseSrcFilesInput {
  storyId: String
  clientMutationId: String
}

type ParseSrcFilesPayload {
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
  viewer: Viewer
  clientMutationId: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type Stats implements Node {
  # The ID of an object
  id: ID!
  numTotalKeys: Float!
  numUsedKeys: Float!
  numTranslations: [StatsForLang]
}

type StatsForLang {
  lang: String!
  value: Float!
}

type Subscription {
  updatedConfig: UpdatedConfigPayload
  updatedStats: UpdatedStatsPayload
  parsedSrcFiles: ParsedSrcFilesPayload
  updatedKey: UpdatedKeyPayload
  createdTranslationInKeyTranslations: CreatedTranslationInKeyTranslationsPayload
  updatedTranslation: UpdatedTranslationPayload
}

type Translation implements Node {
  # The ID of an object
  id: ID!
  isDeleted: Boolean
  lang: String!
  translation: String!
  fuzzy: Boolean
  keyId: ID!
}

# A connection to a list of items.
type TranslationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TranslationEdge]
}

input TranslationCreate {
  lang: String!
  translation: String!
  fuzzy: Boolean
  keyId: ID!
}

# An edge in a connection.
type TranslationEdge {
  # The item at the end of the edge
  node: Translation

  # A cursor for use in pagination
  cursor: String!
}

input TranslationUpdate {
  isDeleted: Boolean
  translation: String
  fuzzy: Boolean
}

input UpdateConfigInput {
  attrs: ConfigUpdate
  storyId: String
  clientMutationId: String
}

type UpdateConfigPayload {
  viewer: Viewer
  stats: Stats!
  config: Config
  clientMutationId: String
}

type UpdatedConfigPayload {
  viewer: Viewer
  config: Config
}

type UpdatedKeyPayload {
  viewer: Viewer
  key: Key
}

type UpdatedStatsPayload {
  viewer: Viewer
  stats: Stats
}

type UpdatedTranslationPayload {
  viewer: Viewer
  translation: Translation
}

input UpdateKeyInput {
  id: ID!
  attrs: KeyUpdate
  storyId: String
  clientMutationId: String
}

type UpdateKeyPayload {
  viewer: Viewer
  stats: Stats!
  key: Key
  clientMutationId: String
}

input UpdateTranslationInput {
  id: ID!
  attrs: TranslationUpdate
  storyId: String
  clientMutationId: String
}

type UpdateTranslationPayload {
  viewer: Viewer
  stats: Stats!
  translation: Translation
  clientMutationId: String
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  config: Config!
  stats: Stats!
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
}
